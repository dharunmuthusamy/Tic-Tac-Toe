import sys
import pygame
import numpy as np
pygame.init()

white = (255, 255, 255)
gray = (180,180,180)
red = (255, 0, 0)
black = (126,75,139)
green = (0, 255, 0)

width =600
height = 600
line_width = 15
board_rows = 3
board_cols = 3
square_size = width // board_cols
circle_radius = square_size // 3
circle_width = 25
cross_width = 25
screen = pygame .display.set_mode((width, height))
pygame.display.set_caption("Tic Tac Toe - YOU(O) VS AI(X)")
pygame.font.init()
screen.fill(black)

board = np.zeros((board_rows, board_cols))
def draw_lines(color=white):
    for i in range(1,board_rows):
        pygame.draw.line(screen, color, (0, i * square_size), (width, i * square_size), line_width)
        pygame.draw.line(screen, color, (i * square_size, 0), (i * square_size, height), line_width)

def draw_figures(color=white):
    for row in range(board_rows):
        for col in range(board_cols):
            if board[row][col] == 1:
                pygame.draw.circle(screen, color, (int(col * square_size + square_size // 2), int(row * square_size + square_size // 2)), circle_radius, circle_width)
            elif board[row][col] == 2:
                offset = square_size // 4
                pygame.draw.line(screen, color, (col * square_size + offset, row * square_size + square_size - offset), (col * square_size + square_size - offset, row * square_size + offset), circle_width)
                pygame.draw.line(screen, color, (col * square_size + offset, row * square_size + offset), (col * square_size + square_size - offset, row * square_size + square_size - offset), circle_width)
def mark_square(row, col, player):
    board[row][col] = player

def available_square(row, col):
    return board[row][col] == 0

def is_board_full(check=board):
    for row in range(board_rows):
        for col in range(board_cols):
            if check[row][col] == 0:
                return False
    return True

def check_win(player,check=board):
    for row in range(board_rows):
        if check[row][0] == player and check[row][1] == player and check[row][2] == player:
            return True
    for col in range(board_cols):
        if check[0][col] == player and check[1][col] == player and check[2][col] == player:
            return True
    if check[0][0] == player and check[1][1] == player and check[2][2] == player:
        return True
    if check[0][2] == player and check[1][1] == player and check[2][0] == player:
        return True
    return False
def minimax(minimax_board, depth, is_maximizing):
    if check_win(2, minimax_board):
        return 1
    elif check_win(1, minimax_board):
        return -1
    elif is_board_full(minimax_board):
        return 0

    if is_maximizing:
        best_score = -np.inf
        for row in range(board_rows):
            for col in range(board_cols):
                if available_square(row, col):
                    mark_square(row, col, 2)
                    score = minimax(minimax_board, depth + 1, False)
                    minimax_board[row][col] = 0
                    best_score = min(score, best_score)
        return best_score
    else:
        best_score = np.inf
        for row in range(board_rows):
            for col in range(board_cols):
                if available_square(row, col):
                    mark_square(row, col, 1)
                    score = minimax(minimax_board, depth + 1, True)
                    minimax_board[row][col] = 0
                    best_score = max(score, best_score)
        return best_score
def best_move():
    best_score = -np.inf
    move = (-1, -1)
    for row in range(board_rows):
        for col in range(board_cols):
            if available_square(row, col):
                mark_square(row, col, 2)
                score = minimax(board, 0, False)
                board[row][col] = 0
                if score > best_score:
                    best_score = score
                    move = (row, col)
    if move != (-1, -1):
        mark_square(move[0], move[1], 2)
        return True
    return False
def reset_game():
    screen.fill(black)
    draw_lines()
    for row in range(board_rows):
        for col in range(board_cols):
            board[row][col] = 0
draw_lines()

player =1
game_over = False
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            mouseX = event.pos[0]
            mouseY = event.pos[1]
            clicked_row = mouseY // square_size
            clicked_col = mouseX // square_size
            if available_square(clicked_row, clicked_col):
                mark_square(clicked_row, clicked_col, player)
                if check_win(player):
                    game_over = True
                player = player%2+1
                if is_board_full():
                    game_over = True
                draw_figures()
                if not game_over:
                    best_move()
                    draw_figures()
                    if check_win(2):
                        game_over = True
                    player = player%2+1
                if is_board_full():
                    game_over = True
                draw_figures()
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_r:
            reset_game()
            game_over = False
            player = 1
    if not game_over:
        draw_figures()
    else:
        if check_win(1):
            draw_figures(green)
            draw_lines(green)
        elif check_win(2):
            draw_figures(red)
            draw_lines(red)
        else:
            draw_figures(gray)
            draw_lines(gray)
    pygame.display.update()